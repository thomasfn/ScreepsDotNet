import 'fastestsmallesttextencoderdecoder';
import { ImportTable } from './interop.js';
import { ScreepsDotNetExports } from './common.js';
export declare function decompressWasm(compressedBytes: Uint8Array, originalSize: number): Uint8Array;
export declare function decodeWasm(encodedWasm: string, originalSize: number, encoding: 'b64' | 'b32768'): Uint8Array;
type Env = 'world' | 'arena' | 'test';
export declare class Bootloader {
    private readonly _env;
    private readonly _pendingLogs;
    private readonly _deferLogsToTick;
    private readonly _profileFn;
    private readonly _stdout;
    private readonly _stderr;
    private readonly _interop;
    private readonly _bindings?;
    private readonly _systemImport;
    private _wasmModule?;
    private _wasmInstance?;
    private _memoryManager?;
    private _compiled;
    private _started;
    private _inTick;
    private _profilingEnabled;
    get compiled(): boolean;
    get started(): boolean;
    get profilingEnabled(): boolean;
    set profilingEnabled(value: boolean);
    get exports(): WebAssembly.Exports & ScreepsDotNetExports;
    constructor(env: Env, profileFn: () => number);
    private sys_get_time;
    private sys_get_random;
    private sys_write_stderr;
    private sys_write_stdout;
    setImports(moduleName: string, importTable: ImportTable): void;
    log(text: string): void;
    private dispatchLog;
    compile(wasmBytes: Uint8Array): void;
    start(customInitExportNames?: ReadonlyArray<string>): void;
    loop(): void;
    private getWasmImports;
    private dispatchPendingLogs;
}
export {};
